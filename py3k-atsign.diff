Index: Python/ceval.c
===================================================================
--- Python/ceval.c	(revision 73491)
+++ Python/ceval.c	(working copy)
@@ -1456,6 +1456,16 @@
 			if (x != NULL) DISPATCH();
 			break;
 
+		TARGET(BINARY_AT)
+			w = POP();
+			v = TOP();
+			x = PyUnicode_FormatPrime(v, w);
+			Py_DECREF(v);
+			Py_DECREF(w);
+			SET_TOP(x);
+			if (x != NULL) DISPATCH();
+			break;
+
 		TARGET(BINARY_ADD)
 			w = POP();
 			v = TOP();
@@ -1617,6 +1627,16 @@
 			if (x != NULL) DISPATCH();
 			break;
 
+		TARGET(INPLACE_AT)
+			w = POP();
+			v = TOP();
+			x = PyUnicode_FormatPrime(v, w);
+			Py_DECREF(v);
+			Py_DECREF(w);
+			SET_TOP(x);
+			if (x != NULL) DISPATCH();
+			break;
+
 		TARGET(INPLACE_ADD)
 			w = POP();
 			v = TOP();
Index: Python/graminit.c
===================================================================
--- Python/graminit.c	(revision 73491)
+++ Python/graminit.c	(working copy)
@@ -394,7 +394,7 @@
 	{1, arcs_15_4},
 	{2, arcs_15_5},
 };
-static arc arcs_16_0[12] = {
+static arc arcs_16_0[13] = {
 	{47, 1},
 	{48, 1},
 	{49, 1},
@@ -407,19 +407,20 @@
 	{56, 1},
 	{57, 1},
 	{58, 1},
+	{59, 1},
 };
 static arc arcs_16_1[1] = {
 	{0, 1},
 };
 static state states_16[2] = {
-	{12, arcs_16_0},
+	{13, arcs_16_0},
 	{1, arcs_16_1},
 };
 static arc arcs_17_0[1] = {
-	{59, 1},
+	{60, 1},
 };
 static arc arcs_17_1[1] = {
-	{60, 2},
+	{61, 2},
 };
 static arc arcs_17_2[1] = {
 	{0, 2},
@@ -430,7 +431,7 @@
 	{1, arcs_17_2},
 };
 static arc arcs_18_0[1] = {
-	{61, 1},
+	{62, 1},
 };
 static arc arcs_18_1[1] = {
 	{0, 1},
@@ -440,11 +441,11 @@
 	{1, arcs_18_1},
 };
 static arc arcs_19_0[5] = {
-	{62, 1},
 	{63, 1},
 	{64, 1},
 	{65, 1},
 	{66, 1},
+	{67, 1},
 };
 static arc arcs_19_1[1] = {
 	{0, 1},
@@ -454,7 +455,7 @@
 	{1, arcs_19_1},
 };
 static arc arcs_20_0[1] = {
-	{67, 1},
+	{68, 1},
 };
 static arc arcs_20_1[1] = {
 	{0, 1},
@@ -464,7 +465,7 @@
 	{1, arcs_20_1},
 };
 static arc arcs_21_0[1] = {
-	{68, 1},
+	{69, 1},
 };
 static arc arcs_21_1[1] = {
 	{0, 1},
@@ -474,7 +475,7 @@
 	{1, arcs_21_1},
 };
 static arc arcs_22_0[1] = {
-	{69, 1},
+	{70, 1},
 };
 static arc arcs_22_1[2] = {
 	{9, 2},
@@ -499,14 +500,14 @@
 	{1, arcs_23_1},
 };
 static arc arcs_24_0[1] = {
-	{70, 1},
+	{71, 1},
 };
 static arc arcs_24_1[2] = {
 	{24, 2},
 	{0, 1},
 };
 static arc arcs_24_2[2] = {
-	{71, 3},
+	{72, 3},
 	{0, 2},
 };
 static arc arcs_24_3[1] = {
@@ -523,8 +524,8 @@
 	{1, arcs_24_4},
 };
 static arc arcs_25_0[2] = {
-	{72, 1},
 	{73, 1},
+	{74, 1},
 };
 static arc arcs_25_1[1] = {
 	{0, 1},
@@ -534,10 +535,10 @@
 	{1, arcs_25_1},
 };
 static arc arcs_26_0[1] = {
-	{74, 1},
+	{75, 1},
 };
 static arc arcs_26_1[1] = {
-	{75, 2},
+	{76, 2},
 };
 static arc arcs_26_2[1] = {
 	{0, 2},
@@ -548,32 +549,32 @@
 	{1, arcs_26_2},
 };
 static arc arcs_27_0[1] = {
-	{71, 1},
+	{72, 1},
 };
 static arc arcs_27_1[3] = {
-	{76, 2},
 	{77, 2},
+	{78, 2},
 	{12, 3},
 };
 static arc arcs_27_2[4] = {
-	{76, 2},
 	{77, 2},
+	{78, 2},
 	{12, 3},
-	{74, 4},
+	{75, 4},
 };
 static arc arcs_27_3[1] = {
-	{74, 4},
+	{75, 4},
 };
 static arc arcs_27_4[3] = {
 	{31, 5},
 	{13, 6},
-	{78, 5},
+	{79, 5},
 };
 static arc arcs_27_5[1] = {
 	{0, 5},
 };
 static arc arcs_27_6[1] = {
-	{78, 7},
+	{79, 7},
 };
 static arc arcs_27_7[1] = {
 	{15, 5},
@@ -592,7 +593,7 @@
 	{21, 1},
 };
 static arc arcs_28_1[2] = {
-	{80, 2},
+	{81, 2},
 	{0, 1},
 };
 static arc arcs_28_2[1] = {
@@ -611,7 +612,7 @@
 	{12, 1},
 };
 static arc arcs_29_1[2] = {
-	{80, 2},
+	{81, 2},
 	{0, 1},
 };
 static arc arcs_29_2[1] = {
@@ -627,14 +628,14 @@
 	{1, arcs_29_3},
 };
 static arc arcs_30_0[1] = {
-	{79, 1},
+	{80, 1},
 };
 static arc arcs_30_1[2] = {
 	{30, 2},
 	{0, 1},
 };
 static arc arcs_30_2[2] = {
-	{79, 1},
+	{80, 1},
 	{0, 2},
 };
 static state states_30[3] = {
@@ -643,7 +644,7 @@
 	{2, arcs_30_2},
 };
 static arc arcs_31_0[1] = {
-	{81, 1},
+	{82, 1},
 };
 static arc arcs_31_1[2] = {
 	{30, 0},
@@ -657,7 +658,7 @@
 	{21, 1},
 };
 static arc arcs_32_1[2] = {
-	{76, 0},
+	{77, 0},
 	{0, 1},
 };
 static state states_32[2] = {
@@ -665,7 +666,7 @@
 	{2, arcs_32_1},
 };
 static arc arcs_33_0[1] = {
-	{82, 1},
+	{83, 1},
 };
 static arc arcs_33_1[1] = {
 	{21, 2},
@@ -680,7 +681,7 @@
 	{2, arcs_33_2},
 };
 static arc arcs_34_0[1] = {
-	{83, 1},
+	{84, 1},
 };
 static arc arcs_34_1[1] = {
 	{21, 2},
@@ -695,7 +696,7 @@
 	{2, arcs_34_2},
 };
 static arc arcs_35_0[1] = {
-	{84, 1},
+	{85, 1},
 };
 static arc arcs_35_1[1] = {
 	{24, 2},
@@ -718,11 +719,11 @@
 	{1, arcs_35_4},
 };
 static arc arcs_36_0[8] = {
-	{85, 1},
 	{86, 1},
 	{87, 1},
 	{88, 1},
 	{89, 1},
+	{90, 1},
 	{19, 1},
 	{18, 1},
 	{17, 1},
@@ -735,7 +736,7 @@
 	{1, arcs_36_1},
 };
 static arc arcs_37_0[1] = {
-	{90, 1},
+	{91, 1},
 };
 static arc arcs_37_1[1] = {
 	{24, 2},
@@ -747,8 +748,8 @@
 	{26, 4},
 };
 static arc arcs_37_4[3] = {
-	{91, 1},
-	{92, 5},
+	{92, 1},
+	{93, 5},
 	{0, 4},
 };
 static arc arcs_37_5[1] = {
@@ -771,7 +772,7 @@
 	{1, arcs_37_7},
 };
 static arc arcs_38_0[1] = {
-	{93, 1},
+	{94, 1},
 };
 static arc arcs_38_1[1] = {
 	{24, 2},
@@ -783,7 +784,7 @@
 	{26, 4},
 };
 static arc arcs_38_4[2] = {
-	{92, 5},
+	{93, 5},
 	{0, 4},
 };
 static arc arcs_38_5[1] = {
@@ -806,13 +807,13 @@
 	{1, arcs_38_7},
 };
 static arc arcs_39_0[1] = {
-	{94, 1},
+	{95, 1},
 };
 static arc arcs_39_1[1] = {
-	{60, 2},
+	{61, 2},
 };
 static arc arcs_39_2[1] = {
-	{95, 3},
+	{96, 3},
 };
 static arc arcs_39_3[1] = {
 	{9, 4},
@@ -824,7 +825,7 @@
 	{26, 6},
 };
 static arc arcs_39_6[2] = {
-	{92, 7},
+	{93, 7},
 	{0, 6},
 };
 static arc arcs_39_7[1] = {
@@ -849,7 +850,7 @@
 	{1, arcs_39_9},
 };
 static arc arcs_40_0[1] = {
-	{96, 1},
+	{97, 1},
 };
 static arc arcs_40_1[1] = {
 	{25, 2},
@@ -858,8 +859,8 @@
 	{26, 3},
 };
 static arc arcs_40_3[2] = {
-	{97, 4},
-	{98, 5},
+	{98, 4},
+	{99, 5},
 };
 static arc arcs_40_4[1] = {
 	{25, 6},
@@ -874,9 +875,9 @@
 	{26, 9},
 };
 static arc arcs_40_8[4] = {
-	{97, 4},
-	{92, 10},
-	{98, 5},
+	{98, 4},
+	{93, 10},
+	{99, 5},
 	{0, 8},
 };
 static arc arcs_40_9[1] = {
@@ -889,7 +890,7 @@
 	{26, 12},
 };
 static arc arcs_40_12[2] = {
-	{98, 5},
+	{99, 5},
 	{0, 12},
 };
 static state states_40[13] = {
@@ -908,10 +909,10 @@
 	{2, arcs_40_12},
 };
 static arc arcs_41_0[1] = {
-	{99, 1},
+	{100, 1},
 };
 static arc arcs_41_1[1] = {
-	{100, 2},
+	{101, 2},
 };
 static arc arcs_41_2[2] = {
 	{30, 1},
@@ -934,11 +935,11 @@
 	{24, 1},
 };
 static arc arcs_42_1[2] = {
-	{80, 2},
+	{81, 2},
 	{0, 1},
 };
 static arc arcs_42_2[1] = {
-	{101, 3},
+	{102, 3},
 };
 static arc arcs_42_3[1] = {
 	{0, 3},
@@ -950,14 +951,14 @@
 	{1, arcs_42_3},
 };
 static arc arcs_43_0[1] = {
-	{102, 1},
+	{103, 1},
 };
 static arc arcs_43_1[2] = {
 	{24, 2},
 	{0, 1},
 };
 static arc arcs_43_2[2] = {
-	{80, 3},
+	{81, 3},
 	{0, 2},
 };
 static arc arcs_43_3[1] = {
@@ -981,14 +982,14 @@
 	{0, 1},
 };
 static arc arcs_44_2[1] = {
-	{103, 3},
+	{104, 3},
 };
 static arc arcs_44_3[1] = {
 	{6, 4},
 };
 static arc arcs_44_4[2] = {
 	{6, 4},
-	{104, 1},
+	{105, 1},
 };
 static state states_44[5] = {
 	{2, arcs_44_0},
@@ -998,21 +999,21 @@
 	{2, arcs_44_4},
 };
 static arc arcs_45_0[2] = {
-	{105, 1},
-	{106, 2},
+	{106, 1},
+	{107, 2},
 };
 static arc arcs_45_1[2] = {
-	{90, 3},
+	{91, 3},
 	{0, 1},
 };
 static arc arcs_45_2[1] = {
 	{0, 2},
 };
 static arc arcs_45_3[1] = {
-	{105, 4},
+	{106, 4},
 };
 static arc arcs_45_4[1] = {
-	{92, 5},
+	{93, 5},
 };
 static arc arcs_45_5[1] = {
 	{24, 2},
@@ -1026,8 +1027,8 @@
 	{1, arcs_45_5},
 };
 static arc arcs_46_0[2] = {
-	{105, 1},
-	{108, 1},
+	{106, 1},
+	{109, 1},
 };
 static arc arcs_46_1[1] = {
 	{0, 1},
@@ -1037,7 +1038,7 @@
 	{1, arcs_46_1},
 };
 static arc arcs_47_0[1] = {
-	{109, 1},
+	{110, 1},
 };
 static arc arcs_47_1[2] = {
 	{33, 2},
@@ -1060,7 +1061,7 @@
 	{1, arcs_47_4},
 };
 static arc arcs_48_0[1] = {
-	{109, 1},
+	{110, 1},
 };
 static arc arcs_48_1[2] = {
 	{33, 2},
@@ -1070,7 +1071,7 @@
 	{25, 3},
 };
 static arc arcs_48_3[1] = {
-	{107, 4},
+	{108, 4},
 };
 static arc arcs_48_4[1] = {
 	{0, 4},
@@ -1083,10 +1084,10 @@
 	{1, arcs_48_4},
 };
 static arc arcs_49_0[1] = {
-	{110, 1},
+	{111, 1},
 };
 static arc arcs_49_1[2] = {
-	{111, 0},
+	{112, 0},
 	{0, 1},
 };
 static state states_49[2] = {
@@ -1094,10 +1095,10 @@
 	{2, arcs_49_1},
 };
 static arc arcs_50_0[1] = {
-	{112, 1},
+	{113, 1},
 };
 static arc arcs_50_1[2] = {
-	{113, 0},
+	{114, 0},
 	{0, 1},
 };
 static state states_50[2] = {
@@ -1105,11 +1106,11 @@
 	{2, arcs_50_1},
 };
 static arc arcs_51_0[2] = {
-	{114, 1},
-	{115, 2},
+	{115, 1},
+	{116, 2},
 };
 static arc arcs_51_1[1] = {
-	{112, 2},
+	{113, 2},
 };
 static arc arcs_51_2[1] = {
 	{0, 2},
@@ -1120,10 +1121,10 @@
 	{1, arcs_51_2},
 };
 static arc arcs_52_0[1] = {
-	{116, 1},
+	{117, 1},
 };
 static arc arcs_52_1[2] = {
-	{117, 0},
+	{118, 0},
 	{0, 1},
 };
 static state states_52[2] = {
@@ -1131,25 +1132,25 @@
 	{2, arcs_52_1},
 };
 static arc arcs_53_0[10] = {
-	{118, 1},
 	{119, 1},
 	{120, 1},
 	{121, 1},
 	{122, 1},
 	{123, 1},
 	{124, 1},
-	{95, 1},
-	{114, 2},
-	{125, 3},
+	{125, 1},
+	{96, 1},
+	{115, 2},
+	{126, 3},
 };
 static arc arcs_53_1[1] = {
 	{0, 1},
 };
 static arc arcs_53_2[1] = {
-	{95, 1},
+	{96, 1},
 };
 static arc arcs_53_3[2] = {
-	{114, 1},
+	{115, 1},
 	{0, 3},
 };
 static state states_53[4] = {
@@ -1160,10 +1161,10 @@
 };
 static arc arcs_54_0[2] = {
 	{31, 1},
-	{101, 2},
+	{102, 2},
 };
 static arc arcs_54_1[1] = {
-	{101, 2},
+	{102, 2},
 };
 static arc arcs_54_2[1] = {
 	{0, 2},
@@ -1174,10 +1175,10 @@
 	{1, arcs_54_2},
 };
 static arc arcs_55_0[1] = {
-	{126, 1},
+	{127, 1},
 };
 static arc arcs_55_1[2] = {
-	{127, 0},
+	{128, 0},
 	{0, 1},
 };
 static state states_55[2] = {
@@ -1185,10 +1186,10 @@
 	{2, arcs_55_1},
 };
 static arc arcs_56_0[1] = {
-	{128, 1},
+	{129, 1},
 };
 static arc arcs_56_1[2] = {
-	{129, 0},
+	{130, 0},
 	{0, 1},
 };
 static state states_56[2] = {
@@ -1196,10 +1197,10 @@
 	{2, arcs_56_1},
 };
 static arc arcs_57_0[1] = {
-	{130, 1},
+	{131, 1},
 };
 static arc arcs_57_1[2] = {
-	{131, 0},
+	{132, 0},
 	{0, 1},
 };
 static state states_57[2] = {
@@ -1207,11 +1208,11 @@
 	{2, arcs_57_1},
 };
 static arc arcs_58_0[1] = {
-	{132, 1},
+	{133, 1},
 };
 static arc arcs_58_1[3] = {
-	{133, 0},
 	{134, 0},
+	{135, 0},
 	{0, 1},
 };
 static state states_58[2] = {
@@ -1219,11 +1220,11 @@
 	{3, arcs_58_1},
 };
 static arc arcs_59_0[1] = {
-	{135, 1},
+	{136, 1},
 };
 static arc arcs_59_1[3] = {
-	{136, 0},
 	{137, 0},
+	{138, 0},
 	{0, 1},
 };
 static state states_59[2] = {
@@ -1231,27 +1232,28 @@
 	{3, arcs_59_1},
 };
 static arc arcs_60_0[1] = {
-	{138, 1},
+	{139, 1},
 };
-static arc arcs_60_1[5] = {
+static arc arcs_60_1[6] = {
 	{31, 0},
-	{139, 0},
 	{140, 0},
 	{141, 0},
+	{11, 0},
+	{142, 0},
 	{0, 1},
 };
 static state states_60[2] = {
 	{1, arcs_60_0},
-	{5, arcs_60_1},
+	{6, arcs_60_1},
 };
 static arc arcs_61_0[4] = {
-	{136, 1},
 	{137, 1},
-	{142, 1},
-	{143, 2},
+	{138, 1},
+	{143, 1},
+	{144, 2},
 };
 static arc arcs_61_1[1] = {
-	{138, 2},
+	{139, 2},
 };
 static arc arcs_61_2[1] = {
 	{0, 2},
@@ -1262,15 +1264,15 @@
 	{1, arcs_61_2},
 };
 static arc arcs_62_0[1] = {
-	{144, 1},
+	{145, 1},
 };
 static arc arcs_62_1[3] = {
-	{145, 1},
+	{146, 1},
 	{32, 2},
 	{0, 1},
 };
 static arc arcs_62_2[1] = {
-	{138, 3},
+	{139, 3},
 };
 static arc arcs_62_3[1] = {
 	{0, 3},
@@ -1283,44 +1285,44 @@
 };
 static arc arcs_63_0[10] = {
 	{13, 1},
-	{147, 2},
-	{149, 3},
+	{148, 2},
+	{150, 3},
 	{21, 4},
-	{152, 4},
-	{153, 5},
-	{77, 4},
-	{154, 4},
+	{153, 4},
+	{154, 5},
+	{78, 4},
 	{155, 4},
 	{156, 4},
+	{157, 4},
 };
 static arc arcs_63_1[3] = {
 	{46, 6},
-	{146, 6},
+	{147, 6},
 	{15, 4},
 };
 static arc arcs_63_2[2] = {
-	{146, 7},
-	{148, 4},
+	{147, 7},
+	{149, 4},
 };
 static arc arcs_63_3[2] = {
-	{150, 8},
-	{151, 4},
+	{151, 8},
+	{152, 4},
 };
 static arc arcs_63_4[1] = {
 	{0, 4},
 };
 static arc arcs_63_5[2] = {
-	{153, 5},
+	{154, 5},
 	{0, 5},
 };
 static arc arcs_63_6[1] = {
 	{15, 4},
 };
 static arc arcs_63_7[1] = {
-	{148, 4},
+	{149, 4},
 };
 static arc arcs_63_8[1] = {
-	{151, 4},
+	{152, 4},
 };
 static state states_63[9] = {
 	{10, arcs_63_0},
@@ -1337,7 +1339,7 @@
 	{24, 1},
 };
 static arc arcs_64_1[3] = {
-	{157, 2},
+	{158, 2},
 	{30, 3},
 	{0, 1},
 };
@@ -1361,15 +1363,15 @@
 };
 static arc arcs_65_0[3] = {
 	{13, 1},
-	{147, 2},
-	{76, 3},
+	{148, 2},
+	{77, 3},
 };
 static arc arcs_65_1[2] = {
 	{14, 4},
 	{15, 5},
 };
 static arc arcs_65_2[1] = {
-	{158, 6},
+	{159, 6},
 };
 static arc arcs_65_3[1] = {
 	{21, 5},
@@ -1381,7 +1383,7 @@
 	{0, 5},
 };
 static arc arcs_65_6[1] = {
-	{148, 5},
+	{149, 5},
 };
 static state states_65[7] = {
 	{3, arcs_65_0},
@@ -1393,14 +1395,14 @@
 	{1, arcs_65_6},
 };
 static arc arcs_66_0[1] = {
-	{159, 1},
+	{160, 1},
 };
 static arc arcs_66_1[2] = {
 	{30, 2},
 	{0, 1},
 };
 static arc arcs_66_2[2] = {
-	{159, 1},
+	{160, 1},
 	{0, 2},
 };
 static state states_66[3] = {
@@ -1418,11 +1420,11 @@
 };
 static arc arcs_67_2[3] = {
 	{24, 3},
-	{160, 4},
+	{161, 4},
 	{0, 2},
 };
 static arc arcs_67_3[2] = {
-	{160, 4},
+	{161, 4},
 	{0, 3},
 };
 static arc arcs_67_4[1] = {
@@ -1451,14 +1453,14 @@
 	{1, arcs_68_2},
 };
 static arc arcs_69_0[1] = {
-	{116, 1},
+	{117, 1},
 };
 static arc arcs_69_1[2] = {
 	{30, 2},
 	{0, 1},
 };
 static arc arcs_69_2[2] = {
-	{116, 1},
+	{117, 1},
 	{0, 2},
 };
 static state states_69[3] = {
@@ -1487,7 +1489,7 @@
 };
 static arc arcs_71_1[4] = {
 	{25, 2},
-	{157, 3},
+	{158, 3},
 	{30, 4},
 	{0, 1},
 };
@@ -1502,7 +1504,7 @@
 	{0, 4},
 };
 static arc arcs_71_5[3] = {
-	{157, 3},
+	{158, 3},
 	{30, 7},
 	{0, 5},
 };
@@ -1538,7 +1540,7 @@
 	{2, arcs_71_10},
 };
 static arc arcs_72_0[1] = {
-	{161, 1},
+	{162, 1},
 };
 static arc arcs_72_1[1] = {
 	{21, 2},
@@ -1574,7 +1576,7 @@
 	{1, arcs_72_7},
 };
 static arc arcs_73_0[3] = {
-	{162, 1},
+	{163, 1},
 	{31, 2},
 	{32, 3},
 };
@@ -1589,7 +1591,7 @@
 	{24, 6},
 };
 static arc arcs_73_4[4] = {
-	{162, 1},
+	{163, 1},
 	{31, 2},
 	{32, 3},
 	{0, 4},
@@ -1602,7 +1604,7 @@
 	{0, 6},
 };
 static arc arcs_73_7[2] = {
-	{162, 5},
+	{163, 5},
 	{32, 3},
 };
 static state states_73[8] = {
@@ -1619,7 +1621,7 @@
 	{24, 1},
 };
 static arc arcs_74_1[3] = {
-	{157, 2},
+	{158, 2},
 	{29, 3},
 	{0, 1},
 };
@@ -1636,8 +1638,8 @@
 	{1, arcs_74_3},
 };
 static arc arcs_75_0[2] = {
-	{157, 1},
-	{164, 1},
+	{158, 1},
+	{165, 1},
 };
 static arc arcs_75_1[1] = {
 	{0, 1},
@@ -1647,19 +1649,19 @@
 	{1, arcs_75_1},
 };
 static arc arcs_76_0[1] = {
-	{94, 1},
+	{95, 1},
 };
 static arc arcs_76_1[1] = {
-	{60, 2},
+	{61, 2},
 };
 static arc arcs_76_2[1] = {
-	{95, 3},
+	{96, 3},
 };
 static arc arcs_76_3[1] = {
-	{105, 4},
+	{106, 4},
 };
 static arc arcs_76_4[2] = {
-	{163, 5},
+	{164, 5},
 	{0, 4},
 };
 static arc arcs_76_5[1] = {
@@ -1674,13 +1676,13 @@
 	{1, arcs_76_5},
 };
 static arc arcs_77_0[1] = {
-	{90, 1},
+	{91, 1},
 };
 static arc arcs_77_1[1] = {
-	{107, 2},
+	{108, 2},
 };
 static arc arcs_77_2[2] = {
-	{163, 3},
+	{164, 3},
 	{0, 2},
 };
 static arc arcs_77_3[1] = {
@@ -1714,7 +1716,7 @@
 	{1, arcs_79_1},
 };
 static arc arcs_80_0[1] = {
-	{167, 1},
+	{168, 1},
 };
 static arc arcs_80_1[2] = {
 	{9, 2},
@@ -1730,169 +1732,169 @@
 };
 static dfa dfas[81] = {
 	{256, "single_input", 0, 3, states_0,
-	 "\004\050\060\200\000\000\000\050\370\044\034\144\011\040\004\000\000\103\050\037\202"},
+	 "\004\050\060\200\000\000\000\120\360\111\070\310\022\100\010\000\000\206\120\076\004\001"},
 	{257, "file_input", 0, 2, states_1,
-	 "\204\050\060\200\000\000\000\050\370\044\034\144\011\040\004\000\000\103\050\037\202"},
+	 "\204\050\060\200\000\000\000\120\360\111\070\310\022\100\010\000\000\206\120\076\004\001"},
 	{258, "eval_input", 0, 3, states_2,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{259, "decorator", 0, 7, states_3,
-	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{260, "decorators", 0, 2, states_4,
-	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{261, "decorated", 0, 3, states_5,
-	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{262, "funcdef", 0, 8, states_6,
-	 "\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{263, "parameters", 0, 4, states_7,
-	 "\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{264, "typedargslist", 0, 12, states_8,
-	 "\000\000\040\200\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\200\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{265, "tfpdef", 0, 4, states_9,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{266, "varargslist", 0, 12, states_10,
-	 "\000\000\040\200\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\200\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{267, "vfpdef", 0, 2, states_11,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{268, "stmt", 0, 2, states_12,
-	 "\000\050\060\200\000\000\000\050\370\044\034\144\011\040\004\000\000\103\050\037\202"},
+	 "\000\050\060\200\000\000\000\120\360\111\070\310\022\100\010\000\000\206\120\076\004\001"},
 	{269, "simple_stmt", 0, 4, states_13,
-	 "\000\040\040\200\000\000\000\050\370\044\034\000\000\040\004\000\000\103\050\037\200"},
+	 "\000\040\040\200\000\000\000\120\360\111\070\000\000\100\010\000\000\206\120\076\000\001"},
 	{270, "small_stmt", 0, 2, states_14,
-	 "\000\040\040\200\000\000\000\050\370\044\034\000\000\040\004\000\000\103\050\037\200"},
+	 "\000\040\040\200\000\000\000\120\360\111\070\000\000\100\010\000\000\206\120\076\000\001"},
 	{271, "expr_stmt", 0, 6, states_15,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{272, "augassign", 0, 2, states_16,
-	 "\000\000\000\000\000\200\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\200\377\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{273, "del_stmt", 0, 3, states_17,
-	 "\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{274, "pass_stmt", 0, 2, states_18,
-	 "\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{275, "flow_stmt", 0, 2, states_19,
-	 "\000\000\000\000\000\000\000\000\170\000\000\000\000\000\000\000\000\000\000\000\200"},
+	 "\000\000\000\000\000\000\000\000\360\000\000\000\000\000\000\000\000\000\000\000\000\001"},
 	{276, "break_stmt", 0, 2, states_20,
-	 "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{277, "continue_stmt", 0, 2, states_21,
-	 "\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{278, "return_stmt", 0, 3, states_22,
-	 "\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{279, "yield_stmt", 0, 2, states_23,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001"},
 	{280, "raise_stmt", 0, 5, states_24,
-	 "\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{281, "import_stmt", 0, 2, states_25,
-	 "\000\000\000\000\000\000\000\000\200\004\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{282, "import_name", 0, 3, states_26,
-	 "\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{283, "import_from", 0, 8, states_27,
-	 "\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{284, "import_as_name", 0, 4, states_28,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{285, "dotted_as_name", 0, 4, states_29,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{286, "import_as_names", 0, 3, states_30,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{287, "dotted_as_names", 0, 2, states_31,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{288, "dotted_name", 0, 2, states_32,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{289, "global_stmt", 0, 3, states_33,
-	 "\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"},
 	{290, "nonlocal_stmt", 0, 3, states_34,
-	 "\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000"},
 	{291, "assert_stmt", 0, 5, states_35,
-	 "\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000"},
 	{292, "compound_stmt", 0, 2, states_36,
-	 "\000\010\020\000\000\000\000\000\000\000\000\144\011\000\000\000\000\000\000\000\002"},
+	 "\000\010\020\000\000\000\000\000\000\000\000\310\022\000\000\000\000\000\000\000\004\000"},
 	{293, "if_stmt", 0, 8, states_37,
-	 "\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000"},
 	{294, "while_stmt", 0, 8, states_38,
-	 "\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000"},
 	{295, "for_stmt", 0, 10, states_39,
-	 "\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000"},
 	{296, "try_stmt", 0, 13, states_40,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000"},
 	{297, "with_stmt", 0, 5, states_41,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000"},
 	{298, "with_item", 0, 4, states_42,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{299, "except_clause", 0, 5, states_43,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000"},
 	{300, "suite", 0, 5, states_44,
-	 "\004\040\040\200\000\000\000\050\370\044\034\000\000\040\004\000\000\103\050\037\200"},
+	 "\004\040\040\200\000\000\000\120\360\111\070\000\000\100\010\000\000\206\120\076\000\001"},
 	{301, "test", 0, 6, states_45,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{302, "test_nocond", 0, 2, states_46,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{303, "lambdef", 0, 5, states_47,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000"},
 	{304, "lambdef_nocond", 0, 5, states_48,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000"},
 	{305, "or_test", 0, 2, states_49,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\010\000\000\206\120\076\000\000"},
 	{306, "and_test", 0, 2, states_50,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\010\000\000\206\120\076\000\000"},
 	{307, "not_test", 0, 3, states_51,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\010\000\000\206\120\076\000\000"},
 	{308, "comparison", 0, 2, states_52,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{309, "comp_op", 0, 4, states_53,
-	 "\000\000\000\000\000\000\000\000\000\000\000\200\000\000\304\077\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\210\177\000\000\000\000\000\000"},
 	{310, "star_expr", 0, 3, states_54,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{311, "expr", 0, 2, states_55,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{312, "xor_expr", 0, 2, states_56,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{313, "and_expr", 0, 2, states_57,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{314, "shift_expr", 0, 2, states_58,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{315, "arith_expr", 0, 2, states_59,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{316, "term", 0, 2, states_60,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{317, "factor", 0, 3, states_61,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{318, "power", 0, 4, states_62,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\120\076\000\000"},
 	{319, "atom", 0, 9, states_63,
-	 "\000\040\040\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\050\037\000"},
+	 "\000\040\040\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\120\076\000\000"},
 	{320, "testlist_comp", 0, 5, states_64,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{321, "trailer", 0, 7, states_65,
-	 "\000\040\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\010\000\000"},
+	 "\000\040\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\020\000\000\000"},
 	{322, "subscriptlist", 0, 3, states_66,
-	 "\000\040\040\202\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\202\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{323, "subscript", 0, 5, states_67,
-	 "\000\040\040\202\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\202\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{324, "sliceop", 0, 3, states_68,
-	 "\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{325, "exprlist", 0, 3, states_69,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\000\000\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\000\000\000\000\206\120\076\000\000"},
 	{326, "testlist", 0, 3, states_70,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{327, "dictorsetmaker", 0, 11, states_71,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{328, "classdef", 0, 8, states_72,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000"},
 	{329, "arglist", 0, 8, states_73,
-	 "\000\040\040\200\001\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\001\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{330, "argument", 0, 4, states_74,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{331, "comp_iter", 0, 2, states_75,
-	 "\000\000\000\000\000\000\000\000\000\000\000\104\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\000"},
 	{332, "comp_for", 0, 6, states_76,
-	 "\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000"},
 	{333, "comp_if", 0, 4, states_77,
-	 "\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000"},
 	{334, "testlist1", 0, 2, states_78,
-	 "\000\040\040\200\000\000\000\000\000\040\000\000\000\040\004\000\000\103\050\037\000"},
+	 "\000\040\040\200\000\000\000\000\000\100\000\000\000\100\010\000\000\206\120\076\000\000"},
 	{335, "encoding_decl", 0, 2, states_79,
-	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+	 "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
 	{336, "yield_expr", 0, 3, states_80,
-	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200"},
+	 "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001"},
 };
-static label labels[168] = {
+static label labels[169] = {
 	{0, "EMPTY"},
 	{256, 0},
 	{4, 0},
@@ -1952,6 +1954,7 @@
 	{46, 0},
 	{47, 0},
 	{49, 0},
+	{56, 0},
 	{1, "del"},
 	{325, 0},
 	{1, "pass"},
@@ -2065,6 +2068,6 @@
 grammar _PyParser_Grammar = {
 	81,
 	dfas,
-	{168, labels},
+	{169, labels},
 	256
 };
Index: Python/ast.c
===================================================================
--- Python/ast.c	(revision 73491)
+++ Python/ast.c	(working copy)
@@ -348,6 +348,8 @@
             return FloorDiv;
         case PERCENT:
             return Mod;
+        case AT:
+            return At;
         default:
             return (operator_ty)0;
     }
@@ -517,6 +519,8 @@
                 return Div;
         case '%':
             return Mod;
+        case '@':
+            return At;
         case '<':
             return LShift;
         case '>':
Index: Python/opcode_targets.h
===================================================================
--- Python/opcode_targets.h	(revision 73491)
+++ Python/opcode_targets.h	(working copy)
@@ -29,6 +29,8 @@
 	&&TARGET_BINARY_TRUE_DIVIDE,
 	&&TARGET_INPLACE_FLOOR_DIVIDE,
 	&&TARGET_INPLACE_TRUE_DIVIDE,
+	&&TARGET_BINARY_AT,
+	&&TARGET_INPLACE_AT,
 	&&_unknown_opcode,
 	&&_unknown_opcode,
 	&&_unknown_opcode,
@@ -51,8 +53,6 @@
 	&&_unknown_opcode,
 	&&_unknown_opcode,
 	&&_unknown_opcode,
-	&&_unknown_opcode,
-	&&_unknown_opcode,
 	&&TARGET_STORE_MAP,
 	&&TARGET_INPLACE_ADD,
 	&&TARGET_INPLACE_SUBTRACT,
Index: Python/compile.c
===================================================================
--- Python/compile.c	(revision 73491)
+++ Python/compile.c	(working copy)
@@ -716,6 +716,7 @@
 		case BINARY_POWER:
 		case BINARY_MULTIPLY:
 		case BINARY_MODULO:
+		case BINARY_AT:
 		case BINARY_ADD:
 		case BINARY_SUBTRACT:
 		case BINARY_SUBSCR:
@@ -730,6 +731,7 @@
 		case INPLACE_SUBTRACT:
 		case INPLACE_MULTIPLY:
 		case INPLACE_MODULO:
+		case INPLACE_AT:
 			return -1;
 		case STORE_SUBSCR:
 			return -3;
@@ -2388,6 +2390,8 @@
 		return BINARY_TRUE_DIVIDE;
 	case Mod:
 		return BINARY_MODULO;
+	case At:
+		return BINARY_AT;
 	case Pow:
 		return BINARY_POWER;
 	case LShift:
@@ -2452,6 +2456,8 @@
 		return INPLACE_TRUE_DIVIDE;
 	case Mod:
 		return INPLACE_MODULO;
+	case At:
+		return INPLACE_AT;
 	case Pow:
 		return INPLACE_POWER;
 	case LShift:
Index: Include/opcode.h
===================================================================
--- Include/opcode.h	(revision 73491)
+++ Include/opcode.h	(working copy)
@@ -33,6 +33,8 @@
 #define BINARY_TRUE_DIVIDE 27
 #define INPLACE_FLOOR_DIVIDE 28
 #define INPLACE_TRUE_DIVIDE 29
+#define BINARY_AT 30
+#define INPLACE_AT 31
 
 #define STORE_MAP	54
 #define INPLACE_ADD	55
Index: Include/unicodeobject.h
===================================================================
--- Include/unicodeobject.h	(revision 73491)
+++ Include/unicodeobject.h	(working copy)
@@ -189,6 +189,7 @@
 # define PyUnicode_EncodeUnicodeEscape PyUnicodeUCS2_EncodeUnicodeEscape
 # define PyUnicode_Find PyUnicodeUCS2_Find
 # define PyUnicode_Format PyUnicodeUCS2_Format
+# define PyUnicode_FormatPrime PyUnicodeUCS2_FormatPrime
 # define PyUnicode_FromEncodedObject PyUnicodeUCS2_FromEncodedObject
 # define PyUnicode_FromFormat PyUnicodeUCS2_FromFormat
 # define PyUnicode_FromFormatV PyUnicodeUCS2_FromFormatV
@@ -288,6 +289,7 @@
 # define PyUnicode_EncodeUnicodeEscape PyUnicodeUCS4_EncodeUnicodeEscape
 # define PyUnicode_Find PyUnicodeUCS4_Find
 # define PyUnicode_Format PyUnicodeUCS4_Format
+# define PyUnicode_FormatPrime PyUnicodeUCS4_FormatPrime
 # define PyUnicode_FromEncodedObject PyUnicodeUCS4_FromEncodedObject
 # define PyUnicode_FromFormat PyUnicodeUCS4_FromFormat
 # define PyUnicode_FromFormatV PyUnicodeUCS4_FromFormatV
@@ -1464,6 +1466,11 @@
     PyObject *args		/* Argument tuple or dictionary */
     );
 
+PyAPI_FUNC(PyObject *) PyUnicode_FormatPrime(
+    PyObject *format,		/* Format string */ 
+    PyObject *args		/* Argument tuple or dictionary */
+    );
+
 /* Checks whether element is contained in container and return 1/0
    accordingly.
 
Index: Include/token.h
===================================================================
--- Include/token.h	(revision 73491)
+++ Include/token.h	(working copy)
@@ -64,6 +64,7 @@
 #define OP		53
 #define ERRORTOKEN	54
 #define N_TOKENS	55
+#define ATEQUAL	56
 
 /* Special definitions for cooperation with parser */
 
Index: Include/Python-ast.h
===================================================================
--- Include/Python-ast.h	(revision 73491)
+++ Include/Python-ast.h	(working copy)
@@ -16,8 +16,8 @@
 typedef enum _boolop { And=1, Or=2 } boolop_ty;
 
 typedef enum _operator { Add=1, Sub=2, Mult=3, Div=4, Mod=5, Pow=6, LShift=7,
-                         RShift=8, BitOr=9, BitXor=10, BitAnd=11, FloorDiv=12 }
-                         operator_ty;
+                         RShift=8, BitOr=9, BitXor=10, BitAnd=11, FloorDiv=12,
+                         At=13 } operator_ty;
 
 typedef enum _unaryop { Invert=1, Not=2, UAdd=3, USub=4 } unaryop_ty;
 
Index: Grammar/Grammar
===================================================================
--- Grammar/Grammar	(revision 73491)
+++ Grammar/Grammar	(working copy)
@@ -40,7 +40,7 @@
 expr_stmt: testlist (augassign (yield_expr|testlist) |
                      ('=' (yield_expr|testlist))*)
 augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
-            '<<=' | '>>=' | '**=' | '//=')
+            '<<=' | '>>=' | '**=' | '//=' | '@=')
 # For normal assignments, additional restrictions enforced by the interpreter
 del_stmt: 'del' exprlist
 pass_stmt: 'pass'
@@ -94,7 +94,7 @@
 and_expr: shift_expr ('&' shift_expr)*
 shift_expr: arith_expr (('<<'|'>>') arith_expr)*
 arith_expr: term (('+'|'-') term)*
-term: factor (('*'|'/'|'%'|'//') factor)*
+term: factor (('*'|'/'|'%'|'@'|'//') factor)*
 factor: ('+'|'-'|'~') factor | power
 power: atom trailer* ['**' factor]
 atom: ('(' [yield_expr|testlist_comp] ')' |
Index: Objects/unicodeobject.c
===================================================================
--- Objects/unicodeobject.c	(revision 73491)
+++ Objects/unicodeobject.c	(working copy)
@@ -9067,6 +9067,71 @@
     return -1;
 }
 
+PyObject *
+PyUnicode_FormatPrime(PyObject *format, PyObject *args)
+{
+    Py_ssize_t arglen;
+    PyObject *dict, *last_item, *retval, *tuple;
+    int args_ref = 0, tuple_ref = 0;
+
+    if (format == NULL || args == NULL) {
+        PyErr_BadInternalCall();
+        return NULL;
+    } else if (!PyUnicode_Check(format)) {
+        PyErr_Format(PyExc_TypeError,
+                     "unsupported operand type(s) for %.100s: "
+                     "'%.100s' and '%.100s'",
+                     "@",
+                     format->ob_type->tp_name,
+                     args->ob_type->tp_name);
+        return NULL;
+    }
+
+    /* default values */
+    tuple = args;
+    dict = NULL;
+    
+    if (PyTuple_Check(args)) {
+        arglen = PyTuple_Size(args);
+
+        if (arglen > 1) {
+            /* check for existence of dict at end */
+            last_item = PyTuple_GetItem(args, arglen - 1);
+            
+            if (PyDict_CheckExact(last_item)) {
+                dict = last_item;
+
+                /* clone n - 1 elements of an n-sized tuple...
+                 * does this introduce a memory leak?
+                 */
+                tuple = PyTuple_GetSlice(args, 0, arglen - 1);
+                args_ref = 1;
+            }
+        }
+    }
+    else if (PyDict_Check(args)) {
+        tuple = PyTuple_New(0);
+        if (!tuple)
+            return NULL;
+        dict = args;
+    }
+    else {
+        /* pass as one-length tuple */
+        tuple = PyTuple_New(1);
+        tuple_ref = 1;
+        PyTuple_SetItem(tuple, 0, args);
+        Py_INCREF(args);
+    }
+
+    retval = do_string_format(format, tuple, dict);
+    if (tuple_ref)
+        Py_DECREF(tuple);
+    if (args_ref)
+        Py_DECREF(args);
+    return retval;
+}
+
+
 /* fmt%(v1,v2,...) is roughly equivalent to sprintf(fmt, v1, v2, ...)
    FORMATBUFLEN is the length of the buffer in which chars are formatted.
 */
Index: Parser/tokenizer.c
===================================================================
--- Parser/tokenizer.c	(revision 73491)
+++ Parser/tokenizer.c	(working copy)
@@ -103,7 +103,8 @@
 	/* This table must match the #defines in token.h! */
 	"OP",
 	"<ERRORTOKEN>",
-	"<N_TOKENS>"
+	"<N_TOKENS>",
+	"ATEQUAL"
 };
 
 
@@ -1084,6 +1085,11 @@
 		case '=':	return PERCENTEQUAL;
 		}
 		break;
+	case '@':
+		switch (c2) {
+		case '=':	return ATEQUAL;
+		}
+		break;
 	case '&':
 		switch (c2) {
 		case '=':	return AMPEREQUAL;
Index: Parser/Python.asdl
===================================================================
--- Parser/Python.asdl	(revision 73491)
+++ Parser/Python.asdl	(working copy)
@@ -93,6 +93,7 @@
 
 	operator = Add | Sub | Mult | Div | Mod | Pow | LShift 
                  | RShift | BitOr | BitXor | BitAnd | FloorDiv
+                 | At
 
 	unaryop = Invert | Not | UAdd | USub
 
Index: Doc/library/dis.rst
===================================================================
--- Doc/library/dis.rst	(revision 73491)
+++ Doc/library/dis.rst	(working copy)
@@ -228,6 +228,11 @@
    Implements ``TOS = TOS1 % TOS``.
 
 
+.. opcode:: BINARY_AT ()
+
+   Implements ``TOS = TOS1 @ TOS``.
+
+
 .. opcode:: BINARY_ADD ()
 
    Implements ``TOS = TOS1 + TOS``.
@@ -299,6 +304,11 @@
    Implements in-place ``TOS = TOS1 % TOS``.
 
 
+.. opcode:: INPLACE_AT ()
+
+   Implements in-place ``TOS = TOS1 @ TOS``.
+
+
 .. opcode:: INPLACE_ADD ()
 
    Implements in-place ``TOS = TOS1 + TOS``.
Index: Lib/opcode.py
===================================================================
--- Lib/opcode.py	(revision 73491)
+++ Lib/opcode.py	(working copy)
@@ -68,6 +68,8 @@
 def_op('BINARY_TRUE_DIVIDE', 27)
 def_op('INPLACE_FLOOR_DIVIDE', 28)
 def_op('INPLACE_TRUE_DIVIDE', 29)
+def_op('BINARY_AT', 30)
+def_op('INPLACE_AT', 31)
 
 def_op('STORE_MAP', 54)
 def_op('INPLACE_ADD', 55)
Index: Modules/parsermodule.c
===================================================================
--- Modules/parsermodule.c	(revision 73491)
+++ Modules/parsermodule.c	(working copy)
@@ -1547,6 +1547,7 @@
                    || strcmp(s, "/=") == 0
                    || strcmp(s, "//=") == 0
                    || strcmp(s, "%=") == 0
+                   || strcmp(s, "@=") == 0
                    || strcmp(s, "&=") == 0
                    || strcmp(s, "|=") == 0
                    || strcmp(s, "^=") == 0
@@ -2251,7 +2252,8 @@
         res = (((TYPE(CHILD(tree, pos)) == STAR)
                || (TYPE(CHILD(tree, pos)) == SLASH)
                || (TYPE(CHILD(tree, pos)) == DOUBLESLASH)
-               || (TYPE(CHILD(tree, pos)) == PERCENT))
+               || (TYPE(CHILD(tree, pos)) == PERCENT)
+               || (TYPE(CHILD(tree, pos)) == AT))
                && validate_factor(CHILD(tree, pos + 1)));
 
     return (res);
